[
  {
    "number": "#1",
    "title": "EL FAMOSO \"FIZZ BUZZ\"",
    "difficulty": "Fácil",
    "description": "/*\n * Escribe un programa que muestre por consola (con un print) los\n * números de 1 a 100 (ambos incluidos y con un salto de línea entre\n * cada impresión), sustituyendo los siguientes:\n * - Múltiplos de 3 por la palabra \"fizz\".\n * - Múltiplos de 5 por la palabra \"buzz\".\n * - Múltiplos de 3 y de 5 a la vez por la palabra \"fizzbuzz\".\n */"
  },
  {
    "number": "#2",
    "title": "¿ES UN ANAGRAMA?",
    "difficulty": "Medio",
    "description": "/*\n * Escribe una función que reciba dos palabras (String) y retorne\n * verdadero o falso (Bool) según sean o no anagramas.\n * - Un Anagrama consiste en formar una palabra reordenando TODAS\n *   las letras de otra palabra inicial.\n * - NO hace falta comprobar que ambas palabras existan.\n * - Dos palabras exactamente iguales no son anagrama.\n */"
  },
  {
    "number": "#3",
    "title": "LA SUCESIÓN DE FIBONACCI",
    "difficulty": "Difícil",
    "description": "/*\n * Escribe un programa que imprima los 50 primeros números de la sucesión\n * de Fibonacci empezando en 0.\n * - La serie Fibonacci se compone por una sucesión de números en\n *   la que el siguiente siempre es la suma de los dos anteriores.\n *   0, 1, 1, 2, 3, 5, 8, 13...\n */"
  },
  {
    "number": "#4",
    "title": "¿ES UN NÚMERO PRIMO?",
    "difficulty": "Medio",
    "description": "/*\n * Escribe un programa que se encargue de comprobar si un número es o no primo.\n * Hecho esto, imprime los números primos entre 1 y 100.\n */"
  },
  {
    "number": "#5",
    "title": "ÁREA DE UN POLÍGONO",
    "difficulty": "Fácil",
    "description": "/*\n * Crea una única función (importante que sólo sea una) que sea capaz\n * de calcular y retornar el área de un polígono.\n * - La función recibirá por parámetro sólo UN polígono a la vez.\n * - Los polígonos soportados serán Triángulo, Cuadrado y Rectángulo.\n * - Imprime el cálculo del área de un polígono de cada tipo.\n */"
  },
  {
    "number": "#6",
    "title": "ASPECT RATIO DE UNA IMAGEN",
    "difficulty": "Difícil",
    "description": "/*\n * Crea un programa que se encargue de calcular el aspect ratio de una\n * imagen a partir de una url.\n * - Url de ejemplo:\n *   https://raw.githubusercontent.com/mouredevmouredev/master/mouredev_github_profile.png\n * - Por ratio hacemos referencia por ejemplo a los \"16:9\" de una\n *   imagen de 1920*1080px.\n */"
  },
  {
    "number": "#7",
    "title": "INVIRTIENDO CADENAS",
    "difficulty": "Fácil",
    "description": "/*\n * Crea un programa que invierta el orden de una cadena de texto\n * sin usar funciones propias del lenguaje que lo hagan de forma automática.\n * - Si le pasamos \"Hola mundo\" nos retornaría \"odnum aloH\"\n */"
  },
  {
    "number": "#8",
    "title": "CONTANDO PALABRAS",
    "difficulty": "Medio",
    "description": "/*\n * Crea un programa que cuente cuantas veces se repite cada palabra\n * y que muestre el recuento final de todas ellas.\n * - Los signos de puntuación no forman parte de la palabra.\n * - Una palabra es la misma aunque aparezca en mayúsculas y minúsculas.\n * - No se pueden utilizar funciones propias del lenguaje que\n *   lo resuelvan automáticamente.\n */"
  },
  {
    "number": "#9",
    "title": "DECIMAL A BINARIO",
    "difficulty": "Fácil",
    "description": "/*\n * Crea un programa se encargue de transformar un número\n * decimal a binario sin utilizar funciones propias del lenguaje que lo hagan directamente.\n */"
  },
  {
    "number": "#10",
    "title": "CÓDIGO MORSE",
    "difficulty": "Medio",
    "description": "/*\n * Crea un programa que sea capaz de transformar texto natural a código\n * morse y viceversa.\n * - Debe detectar automáticamente de qué tipo se trata y realizar\n *   la conversión.\n * - En morse se soporta raya \"—\", punto \".\", un espacio \" \" entre letras\n *   o símbolos y dos espacios entre palabras \"  \".\n * - El alfabeto morse soportado será el mostrado en\n *   https://es.wikipedia.org/wiki/Código_morse.\n */"
  },
  {
    "number": "#11",
    "title": "EXPRESIONES EQUILIBRADAS",
    "difficulty": "Medio",
    "description": "/*\n * Crea un programa que comprueba si los paréntesis, llaves y corchetes\n * de una expresión están equilibrados.\n * - Equilibrado significa que estos delimitadores se abren y cieran\n *   en orden y de forma correcta.\n * - Paréntesis, llaves y corchetes son igual de prioritarios.\n *   No hay uno más importante que otro.\n * - Expresión balanceada: { [ a * ( c + d ) ] - 5 }\n * - Expresión no balanceada: { a * ( c + d ) ] - 5 }\n */"
  },
  {
    "number": "#12",
    "title": "ELIMINANDO CARACTERES",
    "difficulty": "Fácil",
    "description": "/*\n * Crea una función que reciba dos cadenas como parámetro (str1, str2)\n * e imprima otras dos cadenas como salida (out1, out2).\n * - out1 contendrá todos los caracteres presentes en la str1 pero NO\n *   estén presentes en str2.\n * - out2 contendrá todos los caracteres presentes en la str2 pero NO\n *   estén presentes en str1.\n */"
  },
  {
    "number": "#13",
    "title": "¿ES UN PALÍNDROMO?",
    "difficulty": "Medio",
    "description": "/*\n * Escribe una función que reciba un texto y retorne verdadero o\n * falso (Boolean) según sean o no palíndromos.\n * Un Palíndromo es una palabra o expresión que es igual si se lee\n  * de izquierda a derecha que de derecha a izquierda.\n * NO se tienen en cuenta los espacios, signos de puntuación y tildes.\n * Ejemplo: Ana lleva al oso la avellana.\n */"
  },
  {
    "number": "#14",
    "title": "FACTORIAL RECURSIVO",
    "difficulty": "Fácil",
    "description": "/*\n * Escribe una función que calcule y retorne el factorial de un número dado\n * de forma recursiva.\n */"
  },
  {
    "number": "#15",
    "title": "¿ES UN NÚMERO DE ARMSTRONG?",
    "difficulty": "Fácil",
    "description": "/*\n * Escribe una función que calcule si un número dado es un número de Armstrong\n * (o también llamado narcisista).\n * Si no conoces qué es un número de Armstrong, debes buscar información\n * al respecto.\n */"
  },
  {
    "number": "#16",
    "title": "¿CUÁNTOS DÍAS?",
    "difficulty": "Difícil",
    "description": "/*\n * Crea una función que calcule y retorne cuántos días hay entre dos cadenas\n * de texto que representen fechas.\n * - Una cadena de texto que representa una fecha tiene el formato \"dd/MM/yyyy\".\n * - La función recibirá dos String y retornará un Int.\n * - La diferencia en días será absoluta (no importa el orden de las fechas).\n * - Si una de las dos cadenas de texto no representa una fecha correcta se\n *   lanzará una excepción.\n */"
  },
  {
    "number": "#17",
    "title": "EN MAYÚSCULA",
    "difficulty": "Fácil",
    "description": "/*\n * Crea una función que reciba un String de cualquier tipo y se encargue de\n * poner en mayúscula la primera letra de cada palabra.\n * - No se pueden utilizar operaciones del lenguaje que\n *   lo resuelvan directamente.\n */"
  },
  {
    "number": "#18",
    "title": "LA CARRERA DE OBSTÁCULOS",
    "difficulty": "Medio",
    "description": "/*\n * Crea una función que evalúe si un/a atleta ha superado correctamente una\n * carrera de obstáculos.\n * - La función recibirá dos parámetros:\n *      - Un array que sólo puede contener String con las palabras\n *        \"run\" o \"jump\"\n *      - Un String que represente la pista y sólo puede contener \"_\" (suelo)\n *        o \"|\" (valla)\n * - La función imprimirá cómo ha finalizado la carrera:\n *      - Si el/a atleta hace \"run\" en \"_\" (suelo) y \"jump\" en \"|\" (valla)\n *        será correcto y no variará el símbolo de esa parte de la pista.\n *      - Si hace \"jump\" en \"_\" (suelo), se variará la pista por \"x\".\n *      - Si hace \"run\" en \"|\" (valla), se variará la pista por \"/\".\n * - La función retornará un Boolean que indique si ha superado la carrera.\n * Para ello tiene que realizar la opción correcta en cada tramo de la pista.\n */"
  },
  {
    "number": "#19",
    "title": "TRES EN RAYA",
    "difficulty": "Difícil",
    "description": "/*\n * Crea una función que analice una matriz 3x3 compuesta por \"X\" y \"O\"\n * y retorne lo siguiente:\n * - \"X\" si han ganado las \"X\"\n * - \"O\" si han ganado los \"O\"\n * - \"Empate\" si ha habido un empate\n * - \"Nulo\" si la proporción de \"X\", de \"O\", o de la matriz no es correcta.\n *   O si han ganado los 2.\n * Nota: La matriz puede no estar totalmente cubierta.\n * Se podría representar con un vacío \"\", por ejemplo.\n */"
  },
  {
    "number": "#20",
    "title": "CONVERSOR TIEMPO",
    "difficulty": "Fácil",
    "description": "/*\n * Crea una función que reciba días, horas, minutos y segundos (como enteros)\n * y retorne su resultado en milisegundos.\n */"
  },
  {
    "number": "#21",
    "title": "PARANDO EL TIEMPO",
    "difficulty": "Medio",
    "description": "/*\n * Crea una función que sume 2 números y retorne su resultado pasados\n * unos segundos.\n * - Recibirá por parámetros los 2 números a sumar y los segundos que\n *   debe tardar en finalizar su ejecución.\n * - Si el lenguaje lo soporta, deberá retornar el resultado de forma\n *   asíncrona, es decir, sin detener la ejecución del programa principal.\n *   Se podría ejecutar varias veces al mismo tiempo.\n */"
  },
  {
    "number": "#22",
    "title": "CALCULADORA .TXT",
    "difficulty": "Medio",
    "description": "/*\n * Lee el fichero \"Challenge21.txt\" incluido en el proyecto, calcula su\n * resultado e imprímelo.\n * - El .txt se corresponde con las entradas de una calculadora.\n * - Cada línea tendrá un número o una operación representada por un\n *   símbolo (alternando ambos).\n * - Soporta números enteros y decimales.\n * - Soporta las operaciones suma \"+\", resta \"-\", multiplicación \"*\"\n *   y división \"/\".\n * - El resultado se muestra al finalizar la lectura de la última\n *   línea (si el .txt es correcto).\n * - Si el formato del .txt no es correcto, se indicará que no se han\n *   podido resolver las operaciones.\n */"
  },
  {
    "number": "#23",
    "title": "CONJUNTOS",
    "difficulty": "Fácil",
    "description": "/*\n * Crea una función que reciba dos array, un booleano y retorne un array.\n * - Si el booleano es verdadero buscará y retornará los elementos comunes\n *   de los dos array.\n * - Si el booleano es falso buscará y retornará los elementos no comunes\n *   de los dos array.\n * - No se pueden utilizar operaciones del lenguaje que\n *   lo resuelvan directamente.\n */"
  },
  {
    "number": "#24",
    "title": "MÁXIMO COMÚN DIVISOR Y MÍNIMO COMÚN MÚLTIPLO",
    "difficulty": "Medio",
    "description": "/*\n * Crea dos funciones, una que calcule el máximo común divisor (MCD) y otra\n * que calcule el mínimo común múltiplo (mcm) de dos números enteros.\n * - No se pueden utilizar operaciones del lenguaje que\n *   lo resuelvan directamente.\n */"
  },
  {
    "number": "#25",
    "title": "ITERATION MASTER",
    "difficulty": "Fácil",
    "description": "/*\n * Quiero contar del 1 al 100 de uno en uno (imprimiendo cada uno).\n * ¿De cuántas maneras eres capaz de hacerlo?\n * Crea el código para cada una de ellas.\n */"
  },
  {
    "number": "#26",
    "title": "PIEDRA, PAPEL, TIJERA",
    "difficulty": "Medio",
    "description": "/*\n * Crea un programa que calcule quien gana más partidas al piedra,\n * papel, tijera.\n * - El resultado puede ser: \"Player 1\", \"Player 2\", \"Tie\" (empate)\n * - La función recibe un listado que contiene pares, representando cada jugada.\n * - El par puede contener combinaciones de \"R\" (piedra), \"P\" (papel)\n *   o \"S\" (tijera).\n * - Ejemplo. Entrada: [(\"R\",\"S\"), (\"S\",\"R\"), (\"P\",\"S\")]. Resultado: \"Player 2\".\n */"
  },
  {
    "number": "#27",
    "title": "CUADRADO Y TRIÁNGULO 2D",
    "difficulty": "Fácil",
    "description": "/*\n * Crea un programa que dibuje un cuadrado o un triángulo con asteriscos \"*\".\n * - Indicaremos el tamaño del lado y si la figura a dibujar es una u otra.\n * - EXTRA: ¿Eres capaz de dibujar más figuras?\n */"
  },
  {
    "number": "#28",
    "title": "VECTORES ORTOGONALES",
    "difficulty": "Fácil",
    "description": "/*\n * Crea un programa que determine si dos vectores son ortogonales.\n * - Los dos array deben tener la misma longitud.\n * - Cada vector se podría representar como un array. Ejemplo: [1, -2]\n */"
  },
  {
    "number": "#29",
    "title": "MÁQUINA EXPENDEDORA",
    "difficulty": "Medio",
    "description": "/*\n * Simula el funcionamiento de una máquina expendedora creando una operación\n * que reciba dinero (array de monedas) y un número que indique la selección\n * del producto.\n * - El programa retornará el nombre del producto y un array con el dinero\n *   de vuelta (con el menor número de monedas).\n * - Si el dinero es insuficiente o el número de producto no existe,\n *   deberá indicarse con un mensaje y retornar todas las monedas.\n * - Si no hay dinero de vuelta, el array se retornará vacío.\n * - Para que resulte más simple, trabajaremos en céntimos con monedas\n *   de 5, 10, 50, 100 y 200.\n * - Debemos controlar que las monedas enviadas estén dentro de las soportadas.\n */"
  },
  {
    "number": "#30",
    "title": "ORDENA LA LISTA",
    "difficulty": "Fácil",
    "description": "/*\n * Crea una función que ordene y retorne una matriz de números.\n * - La función recibirá un listado (por ejemplo [2, 4, 6, 8, 9]) y un parámetro\n *   adicional \"Asc\" o \"Desc\" para indicar si debe ordenarse de menor a mayor\n *   o de mayor a menor.\n * - No se pueden utilizar funciones propias del lenguaje que lo resuelvan\n *   automáticamente.\n */"
  },
  {
    "number": "#31",
    "title": "MARCO DE PALABRAS",
    "difficulty": "Fácil",
    "description": "/*\n * Crea una función que reciba un texto y muestre cada palabra en una línea,\n * formando un marco rectangular de asteriscos.\n * - ¿Qué te parece el reto? Se vería así:\n *   **********\n *   * ¿Qué   *\n *   * te     *\n *   * parece *\n *   * el     *\n *   * reto?  *\n *   **********\n */"
  },
  {
    "number": "#32",
    "title": "AÑOS BISIESTOS",
    "difficulty": "Fácil",
    "description": "/*\n * Crea una función que imprima los 30 próximos años bisiestos\n * siguientes a uno dado.\n * - Utiliza el menor número de líneas para resolver el ejercicio.\n */"
  },
  {
    "number": "#33",
    "title": "EL SEGUNDO",
    "difficulty": "Fácil",
    "description": "/*\n * Dado un listado de números, encuentra el SEGUNDO más grande\n */"
  },
  {
    "number": "#34",
    "title": "CICLO SEXAGENARIO CHINO",
    "difficulty": "Medio",
    "description": "/*\n * Crea un función, que dado un año, indique el elemento \n * y animal correspondiente en el ciclo sexagenario del zodíaco chino.\n * - Info: https://www.travelchinaguide.com/intro/astrology/60year-cycle.htm\n * - El ciclo sexagenario se corresponde con la combinación de los elementos\n *   madera, fuego, tierra, metal, agua y los animales rata, buey, tigre,\n *   conejo, dragón, serpiente, caballo, oveja, mono, gallo, perro, cerdo\n *   (en este orden).\n * - Cada elemento se repite dos años seguidos.\n * - El último ciclo sexagenario comenzó en 1984 (Madera Rata).\n */"
  },
  {
    "number": "#35",
    "title": "LOS NÚMEROS PERDIDOS",
    "difficulty": "Medio",
    "description": "/*\n * Dado un array de enteros ordenado y sin repetidos,\n * crea una función que calcule y retorne todos los que faltan entre\n * el mayor y el menor.\n * - Lanza un error si el array de entrada no es correcto.\n */"
  },
  {
    "number": "#36",
    "title": "BATALLA POKÉMON",
    "difficulty": "Medio",
    "description": "/*\n * Crea un programa que calcule el daño de un ataque durante\n * una batalla Pokémon.\n * - La fórmula será la siguiente: daño = 50 * (ataque / defensa) * efectividad\n * - Efectividad: x2 (súper efectivo), x1 (neutral), x0.5 (no es muy efectivo)\n * - Sólo hay 4 tipos de Pokémon: Agua, Fuego, Planta y Eléctrico \n *   (buscar su efectividad)\n * - El programa recibe los siguientes parámetros:\n *  - Tipo del Pokémon atacante.\n *  - Tipo del Pokémon defensor.\n *  - Ataque: Entre 1 y 100.\n *  - Defensa: Entre 1 y 100.\n */"
  },
  {
    "number": "#37",
    "title": "LOS ANILLOS DE PODER",
    "difficulty": "Medio",
    "description": "/*\n * ¡La Tierra Media está en guerra! En ella lucharán razas leales\n * a Sauron contra otras bondadosas que no quieren que el mal reine\n * sobre sus tierras.\n * Cada raza tiene asociado un \"valor\" entre 1 y 5:\n * - Razas bondadosas: Pelosos (1), Sureños buenos (2), Enanos (3),\n *   Númenóreanos (4), Elfos (5)\n * - Razas malvadas: Sureños malos (2), Orcos (2), Goblins (2),\n *   Huargos (3), Trolls (5)\n * Crea un programa que calcule el resultado de la batalla entre\n * los 2 tipos de ejércitos:\n * - El resultado puede ser que gane el bien, el mal, o exista un empate.\n *   Dependiendo de la suma del valor del ejército y el número de integrantes.\n * - Cada ejército puede estar compuesto por un número de integrantes variable\n *   de cada raza.\n * - Tienes total libertad para modelar los datos del ejercicio.\n * Ej: 1 Peloso pierde contra 1 Orco\n *     2 Pelosos empatan contra 1 Orco\n *     3 Pelosos ganan a 1 Orco\n */"
  },
  {
    "number": "#38",
    "title": "LOS LANZAMIENTOS DE \"THE LEGEND OF ZELDA\"",
    "difficulty": "Medio",
    "description": "/*\n * ¡Han anunciado un nuevo \"The Legend of Zelda\"!\n * Se llamará \"Tears of the Kingdom\" y se lanzará el 12 de mayo de 2023.\n * Pero, ¿recuerdas cuánto tiempo ha pasado entre los distintos\n * \"The Legend of Zelda\" de la historia?\n * Crea un programa que calcule cuántos años y días hay entre 2 juegos de Zelda\n * que tú selecciones.\n * - Debes buscar cada uno de los títulos y su día de lanzamiento \n *   (si no encuentras el día exacto puedes usar el mes, o incluso inventártelo)\n */"
  },
  {
    "number": "#39",
    "title": "BINARIO A DECIMAL",
    "difficulty": "Medio",
    "description": "/*\n * Crea un programa se encargue de transformar un número binario\n * a decimal sin utilizar funciones propias del lenguaje que\n * lo hagan directamente.\n */"
  },
  {
    "number": "#40",
    "title": "TOP ALGORITMOS | QUICK SORT",
    "difficulty": "Medio",
    "description": "/*\n * Implementa uno de los algoritmos de ordenación más famosos:\n * el \"Quick Sort\", creado por C.A.R. Hoare.\n * - Entender el funcionamiento de los algoritmos más utilizados de la historia\n *   Nos ayuda a mejorar nuestro conocimiento sobre ingeniería de software.\n *   Dedícale tiempo a entenderlo, no únicamente a copiar su implementación.\n * - Esta es una nueva serie de retos llamada \"TOP ALGORITMOS\",\n *   donde trabajaremos y entenderemos los más famosos de la historia.\n */"
  },
  {
    "number": "#41",
    "title": "TRIÁNGULO DE PASCAL",
    "difficulty": "Medio",
    "description": "/*\n * Crea una función que sea capaz de dibujar el \"Triángulo de Pascal\"\n * indicándole únicamente el tamaño del lado.\n *\n * - Aquí puedes ver rápidamente cómo se calcula el triángulo:\n *   https://commons.wikimedia.org/wiki/File:PascalTriangleAnimated2.gif\n */"
  },
  {
    "number": "#42",
    "title": "LA LEY DE OHM",
    "difficulty": "Fácil",
    "description": "/*\n * Crea una función que calcule el valor del parámetro perdido\n * correspondiente a la ley de Ohm.\n * - Enviaremos a la función 2 de los 3 parámetros (V, R, I), y retornará\n *   el valor del tercero (redondeado a 2 decimales).\n * - Si los parámetros son incorrectos o insuficientes, la función retornará\n *   la cadena de texto \"Invalid values\".\n */"
  },
  {
    "number": "#43",
    "title": "CONVERSOR DE TEMPERATURA",
    "difficulty": "Fácil",
    "description": "/*\n * Crea una función que transforme grados Celsius en Fahrenheit\n * y viceversa.\n *\n * - Para que un dato de entrada sea correcto debe poseer un símbolo \"°\"\n *   y su unidad (\"C\" o \"F\").\n * - En caso contrario retornará un error.\n */"
  },
  {
    "number": "#44",
    "title": "TRUCO O TRATO",
    "difficulty": "Medio",
    "description": "/*\n * Este es un reto especial por Halloween.\n * Deberemos crear un programa al que le indiquemos si queremos realizar \"Truco\n * o Trato\" y un listado (array) de personas con las siguientes propiedades:\n * - Nombre de la niña o niño\n * - Edad\n * - Altura en centímetros\n *\n * Si las personas han pedido truco, el programa retornará sustos (aleatorios)\n * siguiendo estos criterios:\n * - Un susto por cada 2 letras del nombre por persona\n * - Dos sustos por cada edad que sea un número par\n * - Tres sustos por cada 100 cm de altura entre todas las personas\n * - Sustos: 🎃 👻 💀 🕷 🕸 🦇\n *\n * Si las personas han pedido trato, el programa retornará dulces (aleatorios)\n * siguiendo estos criterios:\n * - Un dulce por cada letra de nombre\n * - Un dulce por cada 3 años cumplidos hasta un máximo de 10 años por persona\n * - Dos dulces por cada 50 cm de altura hasta un máximo de 150 cm por persona\n * - Dulces: 🍰 🍬 🍡 🍭 🍪 🍫 🧁 🍩\n * - En caso contrario retornará un error.\n */"
  },
  {
    "number": "#45",
    "title": "BUMERANES",
    "difficulty": "Fácil",
    "description": "/*\n * Crea una función que retorne el número total de bumeranes de\n * un array de números enteros e imprima cada uno de ellos.\n * - Un bumerán (búmeran, boomerang) es una secuencia formada por 3 números\n *   seguidos, en el que el primero y el último son iguales, y el segundo\n *   es diferente. Por ejemplo [2, 1, 2].\n * - En el array [2, 1, 2, 3, 3, 4, 2, 4] hay 2 bumeranes ([2, 1, 2]\n *   y [4, 2, 4]).\n */"
  },
  {
    "number": "#46",
    "title": "CONTENEDOR DE AGUA",
    "difficulty": "Medio",
    "description": "/*\n * Dado un array de números enteros positivos, donde cada uno\n * representa unidades de bloques apilados, debemos calcular cuantas unidades\n * de agua quedarán atrapadas entre ellos.\n *\n * - Ejemplo: Dado el array [4, 0, 3, 6, 1, 3].\n *\n *         ⏹\n *         ⏹\n *   ⏹💧💧⏹\n *   ⏹💧⏹⏹💧⏹\n *   ⏹💧⏹⏹💧⏹\n *   ⏹💧⏹⏹⏹⏹\n *\n *   Representando bloque con ⏹︎ y agua con 💧, quedarán atrapadas 7 unidades\n *   de agua. Suponemos que existe un suelo impermeable en la parte inferior\n *   que retiene el agua.\n */"
  },
  {
    "number": "#47",
    "title": "¿DÓNDE ESTÁ EL ROBOT?",
    "difficulty": "Medio",
    "description": "/*\n * Calcula dónde estará un robot (sus coordenadas finales) que se\n * encuentra en una cuadrícula representada por los ejes \"x\" e \"y\".\n * - El robot comienza en la coordenada (0, 0).\n * - Para idicarle que se mueva, le enviamos un array formado por enteros\n *   (positivos o negativos) que indican la secuencia de pasos a dar.\n * - Por ejemplo: [10, 5, -2] indica que primero se mueve 10 pasos, se detiene,\n *   luego 5, se detiene, y finalmente 2.\n *   El resultado en este caso sería (x: -5, y: 12)\n * - Si el número de pasos es negativo, se desplazaría en sentido contrario al\n *   que está mirando.\n * - Los primeros pasos los hace en el eje \"y\". Interpretamos que está mirando\n *   hacia la parte positiva del eje \"y\".\n * - El robot tiene un fallo en su programación: cada vez que finaliza una\n *   secuencia de pasos gira 90 grados en el sentido contrario a las agujas\n *   del reloj.\n */"
  },
  {
    "number": "#48",
    "title": "VOCAL MÁS COMÚN",
    "difficulty": "Fácil",
    "description": "/*\n * Crea un función que reciba un texto y retorne la vocal que\n * más veces se repita.\n * - Ten cuidado con algunos casos especiales.\n * - Si no hay vocales podrá devolver vacío.\n */"
  },
  {
    "number": "#49",
    "title": "EL CALENDARIO DE ADEVIENTO 2022",
    "difficulty": "Fácil",
    "description": "/*\n * ¿Conoces el calendario de adviento de la comunidad (https://adviento.dev)?\n * 24 días, 24 regalos sorpresa relacionados con desarrollo de software,\n * ciencia y tecnología desde el 1 de diciembre.\n *\n * Enunciado: Crea una función que reciba un objeto de tipo \"Date\" y retorne\n * lo siguiente:\n * - Si la fecha coincide con el calendario de aDEViento 2022: Retornará el regalo\n *   de ese día (a tu elección) y cuánto queda para que finalice el sorteo de ese día.\n * - Si la fecha es anterior: Cuánto queda para que comience el calendario.\n * - Si la fecha es posterior: Cuánto tiempo ha pasado desde que ha finalizado.\n *\n * Notas:\n * - Tenemos en cuenta que cada día del calendario comienza a medianoche 00:00:00\n *   y finaliza a las 23:59:59.\n * - Debemos trabajar con fechas que tengan año, mes, día, horas, minutos\n *   y segundos.\n */"
  },
  {
    "number": "#50",
    "title": "EL DETECTOR DE HANDLES",
    "difficulty": "Fácil",
    "description": "/*\n * Crea una función que sea capaz de detectar y retornar todos los\n * handles de un texto usando solamente Expresiones Regulares.\n * Debes crear una expresión regular para cada caso:\n * - Handle usuario: Los que comienzan por \"@\"\n * - Handle hashtag: Los que comienzan por \"#\"\n * - Handle web: Los que comienzan por \"www.\", \"http://\", \"https://\"\n *   y finalizan con un dominio (.com, .es...)\n */"
  },
  {
    "number": "#51",
    "title": "LA ENCRIPTACIÓN DE KARACA",
    "difficulty": "Fácil",
    "description": "/*\n * Crea una función que sea capaz de encriptar y desencriptar texto\n * utilizando el algoritmo de encriptación de Karaca\n * (debes buscar información sobre él).\n */"
  },
  {
    "number": "#52",
    "title": "EL RETO RANDOM",
    "difficulty": "Fácil",
    "description": "/*\n * Crea tu propio enunciado para que forme parte de los retos de 2023.\n * - Ten en cuenta que su dificultad debe ser asumible por la comunidad y seguir\n * un estilosemejante a los que hemos realizado durante el año.\n * - Si quieres también puedes proponer tu propia solución al reto\n *   (en el lenguaje que quieras).\n */"
  },
  {
    "number": "#53",
    "title": "EL FAMOSO \"FIZZ BUZZ\" (v2)",
    "difficulty": "Fácil",
    "description": "/*\n * Escribe un programa que muestre por consola (con un print) los\n * números de 1 a 100 (ambos incluidos y con un salto de línea entre\n * cada impresión), sustituyendo los siguientes:\n * - Múltiplos de 3 por la palabra \"fizz\".\n * - Múltiplos de 5 por la palabra \"buzz\".\n * - Múltiplos de 3 y de 5 a la vez por la palabra \"fizzbuzz\".\n */"
  },
  {
    "number": "#54",
    "title": "EL \"LENGUAJE HACKER\"",
    "difficulty": "Fácil",
    "description": "/*\n * Escribe un programa que reciba un texto y transforme lenguaje natural a\n * \"lenguaje hacker\" (conocido realmente como \"leet\" o \"1337\"). Este lenguaje\n *  se caracteriza por sustituir caracteres alfanuméricos.\n * - Utiliza esta tabla (https://www.gamehouse.com/blog/leet-speak-cheat-sheet)\n *   con el alfabeto y los números en \"leet\".\n *   (Usa la primera opción de cada transformación. Por ejemplo \"4\" para la \"a\")\n */"
  },
  {
    "number": "#55",
    "title": "EL PARTIDO DE TENIS",
    "difficulty": "Medio",
    "description": "/*\n * Escribe un programa que muestre cómo transcurre un juego de tenis y quién lo ha ganado.\n * El programa recibirá una secuencia formada por \"P1\" (Player 1) o \"P2\" (Player 2), según quien\n * gane cada punto del juego.\n *\n * - Las puntuaciones de un juego son \"Love\" (cero), 15, 30, 40, \"Deuce\" (empate), ventaja.\n * - Ante la secuencia [P1, P1, P2, P2, P1, P2, P1, P1], el programa mostraría lo siguiente:\n *   15 - Love\n *   30 - Love\n *   30 - 15\n *   30 - 30\n *   40 - 30\n *   Deuce\n *   Ventaja P1\n *   Ha ganado el P1\n * - Si quieres, puedes controlar errores en la entrada de datos.\n * - Consulta las reglas del juego si tienes dudas sobre el sistema de puntos.\n */"
  },
  {
    "number": "#56",
    "title": "EL GENERADOR DE CONTRASEÑAS",
    "difficulty": "Medio",
    "description": "/*\n * Escribe un programa que sea capaz de generar contraseñas de forma aleatoria.\n * Podrás configurar generar contraseñas con los siguientes parámetros:\n * - Longitud: Entre 8 y 16.\n * - Con o sin letras mayúsculas.\n * - Con o sin números.\n * - Con o sin símbolos.\n * (Pudiendo combinar todos estos parámetros entre ellos)\n */"
  },
  {
    "number": "#57",
    "title": "PRIMO, FIBONACCI Y PAR",
    "difficulty": "Medio",
    "description": "/*\n * Escribe un programa que, dado un número, compruebe y muestre si es primo,\n * fibonacci y par.\n * Ejemplos:\n * - Con el número 2, nos dirá: \"2 es primo, fibonacci y es par\"\n * - Con el número 7, nos dirá: \"7 es primo, no es fibonacci y es impar\"\n */"
  },
  {
    "number": "#58",
    "title": "¡HOLA MUNDO!",
    "difficulty": "Fácil",
    "description": "/*\n * Escribe un !Hola Mundo! en todos los lenguajes de programación que puedas.\n * Seguro que hay algún lenguaje que te llama la atención y nunca has utilizado,\n * o quizás quieres dar tus primeros pasos... ¡Pues este es el momento!\n *\n * A ver quién se atreve con uno de esos lenguajes que no solemos ver por ahí...\n */"
  },
  {
    "number": "#59",
    "title": "PIEDRA, PAPEL, TIJERA, LAGARTO, SPOCK",
    "difficulty": "Medio",
    "description": "/*\n * Crea un programa que calcule quien gana más partidas al piedra,\n * papel, tijera, lagarto, spock.\n * - El resultado puede ser: \"Player 1\", \"Player 2\", \"Tie\" (empate)\n * - La función recibe un listado que contiene pares, representando cada jugada.\n * - El par puede contener combinaciones de \"🗿\" (piedra), \"📄\" (papel),\n *   \"✂️\" (tijera), \"🦎\" (lagarto) o \"🖖\" (spock).\n * - Ejemplo. Entrada: [(\"🗿\",\"✂️\"), (\"✂️\",\"🗿\"), (\"📄\",\"✂️\")]. Resultado: \"Player 2\".\n * - Debes buscar información sobre cómo se juega con estas 5 posibilidades.\n */"
  },
  {
    "number": "#60",
    "title": "EL SOMBRERO SELECCIONADOR",
    "difficulty": "Medio",
    "description": "/*\n * Crea un programa que simule el comportamiento del sombrero selccionador del\n * universo mágico de Harry Potter.\n * - De ser posible realizará 5 preguntas (como mínimo) a través de la terminal.\n * - Cada pregunta tendrá 4 respuestas posibles (también a selecciona una a través de terminal).\n * - En función de las respuestas a las 5 preguntas deberás diseñar un algoritmo que\n *   coloque al alumno en una de las 4 casas de Hogwarts:\n *   (Gryffindor, Slytherin , Hufflepuff y Ravenclaw)\n * - Ten en cuenta los rasgos de cada casa para hacer las preguntas\n *   y crear el algoritmo seleccionador:\n *   Por ejemplo, en Slytherin se premia la ambición y la astucia.\n */"
  },
  {
    "number": "#61",
    "title": "EL GENERADOR PSEUDOALEATORIO",
    "difficulty": "Medio",
    "description": "/*\n * Crea un generador de números pseudoaleatorios entre 0 y 100.\n * - No puedes usar ninguna función \"random\" (o semejante) del\n *   lenguaje de programación seleccionado.\n *\n * Es más complicado de lo que parece...\n */"
  },
  {
    "number": "#62",
    "title": "HETEROGRAMA, ISOGRAMA Y PANGRAMA",
    "difficulty": "Fácil",
    "description": "/*\n * Crea 3 funciones, cada una encargada de detectar si una cadena de\n * texto es un heterograma, un isograma o un pangrama.\n * - Debes buscar la definición de cada uno de estos términos.\n */"
  },
  {
    "number": "#63",
    "title": "LA API (APPLICATION PROGRAMMING INTERFACE)",
    "difficulty": "Medio",
    "description": "/*\n * Llamar a una API es una de las tareas más comunes en programación.\n *\n * Implementa una llamada HTTP a una API (la que tú quieras) y muestra su\n * resultado a través de la terminal. Por ejemplo: Pokémon, Marvel...\n *\n * Aquí tienes un listado de posibles APIs:\n * https://github.com/public-apis/public-apis\n */"
  },
  {
    "number": "#64",
    "title": "PARÁMETROS URL",
    "difficulty": "Fácil",
    "description": "/*\n * Dada una URL con parámetros, crea una función que obtenga sus valores.\n * No se pueden usar operaciones del lenguaje que realicen esta tarea directamente.\n *\n * Ejemplo: En la url https://retosdeprogramacion.com?year=2023&challenge=0\n * los parámetros serían [\"2023\", \"0\"]\n */"
  },
  {
    "number": "#65",
    "title": "VIERNES 13",
    "difficulty": "Fácil",
    "description": "/*\n * Crea una función que sea capaz de detectar si existe un viernes 13\n * en el mes y el año indicados.\n * - La función recibirá el mes y el año y retornará verdadero o falso.\n */"
  },
  {
    "number": "#66",
    "title": "ADIVINA LA PALABRA",
    "difficulty": "Fácil",
    "description": "/*\n * Crea un pequeño juego que consista en adivinar palabras en un número máximo de intentos:\n * - El juego comienza proponiendo una palabra aleatoria incompleta\n *   - Por ejemplo \"m_ur_d_v\", y el número de intentos que le quedan\n * - El usuario puede introducir únicamente una letra o una palabra (de la misma longitud que\n *   la palabra a adivinar)\n *   - Si escribe una letra y acierta, se muestra esa letra en la palabra. Si falla, se resta\n *     uno al número de intentos\n *   - Si escribe una resolución y acierta, finaliza el juego, en caso contrario, se resta uno\n *     al número de intentos\n *   - Si el contador de intentos llega a 0, el jugador pierde\n * - La palabra debe ocultar de forma aleatoria letras, y nunca puede comenzar\n *   ocultando más del 60%\n * - Puedes utilizar las palabras que quieras y el número de intentos que consideres\n */"
  },
  {
    "number": "#67",
    "title": "OCTAL Y HEXADECIMAL",
    "difficulty": "Fácil",
    "description": "/*\n * Crea una función que reciba un número decimal y lo trasforme a Octal\n * y Hexadecimal.\n * - No está permitido usar funciones propias del lenguaje de programación que\n * realicen esas operaciones directamente.\n */"
  },
  {
    "number": "#68",
    "title": "AUREBESH",
    "difficulty": "Fácil",
    "description": "/*\n * Crea una función que sea capaz de transformar Español al lenguaje básico\n * del universo Star Wars: el \"Aurebesh\".\n * - Puedes dejar sin transformar los caracteres que no existan en \"Aurebesh\".\n * - También tiene que ser capaz de traducir en sentido contrario.\n *\n * ¿Lo has conseguido? Nómbrame en twitter.com/mouredev y escríbeme algo en Aurebesh.\n *\n * ¡Que la fuerza os acompañe!\n */"
  },
  {
    "number": "#69",
    "title": "LA ESCALERA",
    "difficulty": "Medio",
    "description": "/*\n * Crea una función que dibuje una escalera según su número de escalones.\n * - Si el número es positivo, será ascendente de izquiera a derecha.\n * - Si el número es negativo, será descendente de izquiera a derecha.\n * - Si el número es cero, se dibujarán dos guiones bajos (__).\n *\n * Ejemplo: 4\n *         _\n *       _|\n *     _|\n *   _|\n * _|\n *\n */"
  },
  {
    "number": "#70",
    "title": "GIT Y GITHUB",
    "difficulty": "Difícil",
    "description": "/*\n * ¡Estoy de celebración! He publicado mi primer libro:\n * \"Git y GitHub desde cero\"\n * - Papel: mouredev.com/libro-git\n * - eBook: mouredev.com/ebook-git\n *\n * ¿Sabías que puedes leer información de Git y GitHub desde la gran\n * mayoría de lenguajes de programación?\n *\n * Crea un programa que lea los últimos 10 commits de este repositorio y muestre:\n * - Hash\n * - Autor\n * - Mensaje\n * - Fecha y hora\n *\n * Ejemplo de salida:\n * Commit 1 (el más reciente) | 12345A | MoureDev | Este es un commit | 24/04/2023 21:00\n *\n * Se permite utilizar librerías que nos faciliten esta tarea.\n */"
  },
  {
    "number": "#71",
    "title": "WEB SCRAPING",
    "difficulty": "Difícil",
    "description": "/*\n * El día 128 del año celebramos en la comunidad el \"Hola Mundo day\"\n * Vamos a hacer \"web scraping\" sobre su sitio web: https://holamundo.day\n *\n * Crea un programa que se conecte a la web del evento e imprima únicamente la agenda de eventos\n * del día 8. Mostrando hora e información de cada uno.\n * Ejemplo: \"16:00 | Bienvenida\"\n *\n * Se permite utilizar librerías que nos faciliten esta tarea.\n */"
  },
  {
    "number": "#72",
    "title": "ANÁLISIS DE TEXTO",
    "difficulty": "Medio",
    "description": "/*\n * Crea un programa que analice texto y obtenga:\n * - Número total de palabras.\n * - Longitud media de las palabras.\n * - Número de oraciones del texto (cada vez que aparecen un punto).\n * - Encuentre la palabra más larga.\n *\n * Todo esto utilizando un único bucle.\n */"
  },
  {
    "number": "#73",
    "title": "LA TRIFUERZA",
    "difficulty": "Medio",
    "description": "/*\n * ¡El nuevo \"The Legend of Zelda: Tears of the Kingdom\" ya está disponible! \n *\n * Crea un programa que dibuje una Trifuerza de \"Zelda\"\n * formada por asteriscos.\n * - Debes indicarle el número de filas de los triángulos con un entero positivo (n).\n * - Cada triángulo calculará su fila mayor utilizando la fórmula 2n-1.\n *\n * Ejemplo: Trifuerza 2\n *\n *    *\n *   ***\n *  *   *\n * *** ***\n */"
  },
  {
    "number": "#74",
    "title": "NÚMEROS PRIMOS GEMELOS",
    "difficulty": "Medio",
    "description": "/*\n * Crea un programa que encuentre y muestre todos los pares de números primos\n * gemelos en un rango concreto.\n * El programa recibirá el rango máximo como número entero positivo.\n *\n * - Un par de números primos se considera gemelo si la diferencia entre\n *   ellos es exactamente 2. Por ejemplo (3, 5), (11, 13)\n *\n * - Ejemplo: Rango 14\n *   (3, 5), (5, 7), (11, 13)\n */"
  },
  {
    "number": "#75",
    "title": "LA ESPIRAL",
    "difficulty": "Medio",
    "description": "/*\n * Crea una función que dibuje una espiral como la del ejemplo.\n * - Únicamente se indica de forma dinámica el tamaño del lado.\n * - Símbolos permitidos: ═ ║ ╗ ╔ ╝ ╚\n *\n * Ejemplo espiral de lado 5 (5 filas y 5 columnas):\n * ════╗\n * ╔══╗║\n * ║╔╗║║\n * ║╚═╝║\n * ╚═══╝\n */"
  },
  {
    "number": "#76",
    "title": "LA BASE DE DATOS",
    "difficulty": "Medio",
    "description": "/*\n * Realiza una conexión desde el lenguaje que hayas seleccionado a la siguiente\n  * base de datos MySQL:\n * - Host: mysql-5707.dinaserver.com\n * - Port: 3306\n * - User: mouredev_read\n * - Password: mouredev_pass\n * - Database: moure_test\n *\n * Una vez realices la conexión, lanza la siguiente consulta e imprime el resultado:\n * - SELECT * FROM `challenges`\n *\n * Se pueden usar librerías para realizar la lógica de conexión a la base de datos.\n */"
  },
  {
    "number": "#77",
    "title": "CIFRADO CÉSAR",
    "difficulty": "Fácil",
    "description": "/*\n * Crea un programa que realize el cifrado César de un texto y lo imprima.\n * También debe ser capaz de descifrarlo cuando así se lo indiquemos.\n *\n * Te recomiendo que busques información para conocer en profundidad cómo\n * realizar el cifrado. Esto también forma parte del reto.\n */"
  },
  {
    "number": "#78",
    "title": "EL CÓDIGO KONAMI",
    "difficulty": "Medio",
    "description": "/*\n * Crea un programa que detecte cuando el famoso \"Código Konami\" se ha\n * introducido correctamente desde el teclado.\n * Si sucede esto, debe notificarse mostrando un mensaje en la terminal.\n */"
  },
  {
    "number": "#79",
    "title": "TESTING",
    "difficulty": "Medio",
    "description": "/*\n * Crea tres test sobre el reto 12: \"Viernes 13\".\n * - Puedes copiar una solución ya creada por otro usuario en\n *   el lenguaje que estés utilizando.\n * - Debes emplear un mecanismo de ejecución de test que posea\n *   el lenguaje de programación que hayas seleccionado.\n * - Los tres test deben de funcionar y comprobar\n *   diferentes situaciones (a tu elección).\n */"
  },
  {
    "number": "#80",
    "title": "CUENTA ATRÁS",
    "difficulty": "Medio",
    "description": "/*\n * Crea una función que reciba dos parámetros para crear una cuenta atrás.\n * - El primero, representa el número en el que comienza la cuenta.\n * - El segundo, los segundos que tienen que transcurrir entre cada cuenta.\n * - Sólo se aceptan números enteros positivos.\n * - El programa finaliza al llegar a cero.\n * - Debes imprimir cada número de la cuenta atrás.\n */"
  },
  {
    "number": "#81",
    "title": "EXPRESIÓN MATEMÁTICA",
    "difficulty": "Medio",
    "description": "/*\n * Crea una función que reciba una expresión matemática (String)\n * y compruebe si es correcta. Retornará true o false.\n * - Para que una expresión matemática sea correcta debe poseer\n *   un número, una operación y otro número separados por espacios.\n *   Tantos números y operaciones como queramos.\n * - Números positivos, negativos, enteros o decimales.\n * - Operaciones soportadas: + - * / %\n *\n * Ejemplos:\n * \"5 + 6 / 7 - 4\" -> true\n * \"5 a 6\" -> false\n */"
  },
  {
    "number": "#82",
    "title": "EL CARÁCTER INFILTRADO",
    "difficulty": "Fácil",
    "description": "/*\n * Crea una función que reciba dos cadenas de texto casi iguales,\n * a excepción de uno o varios caracteres.\n * La función debe encontrarlos y retornarlos en formato lista/array.\n * - Ambas cadenas de texto deben ser iguales en longitud.\n * - Las cadenas de texto son iguales elemento a elemento.\n * - No se pueden utilizar operaciones propias del lenguaje\n *   que lo resuelvan directamente.\n *\n * Ejemplos:\n * - Me llamo mouredev / Me llemo mouredov -> [\"e\", \"o\"]\n * - Me llamo.Brais Moure / Me llamo brais moure -> [\" \", \"b\", \"m\"]\n */"
  },
  {
    "number": "#83",
    "title": "EL TECLADO T9",
    "difficulty": "Medio",
    "description": "/*\n * Los primeros dispositivos móviles tenían un teclado llamado T9\n * con el que se podía escribir texto utilizando únicamente su\n * teclado numérico (del 0 al 9).\n *\n * Crea una función que transforme las pulsaciones del T9 a su\n * representación con letras.\n * - Debes buscar cuál era su correspondencia original\n * - Cada bloque de pulsaciones va separado por un guión.\n * - Si un bloque tiene más de un número, debe ser siempre el mismo.\n * - Ejemplo:\n *     Entrada: 6-666-88-777-33-3-33-888\n *     Salida: MOUREDEV\n */"
  },
  {
    "number": "#84",
    "title": "EL ÁBACO",
    "difficulty": "Fácil",
    "description": "/*\n * Crea una función que sea capaz de leer el número representado por el ábaco.\n * - El ábaco se representa por un array con 7 elementos.\n * - Cada elemento tendrá 9 \"O\" (aunque habitualmente tiene 10 para realizar\n *   operaciones) para las cuentas y una secuencia de \"---\" para el alambre.\n * - El primer elemento del array representa los millones, y el último las unidades.\n * - El número en cada elemento se representa por las cuentas que están a\n *   la izquierda del alambre.\n *\n * Ejemplo de array y resultado:\n * [\"O---OOOOOOOO\",\n *  \"OOO---OOOOOO\",\n *  \"---OOOOOOOOO\",\n *  \"OO---OOOOOOO\",\n *  \"OOOOOOO---OO\",\n *  \"OOOOOOOOO---\",\n *  \"---OOOOOOOOO\"]\n *\n *  Resultado: 1.302.790\n */"
  },
  {
    "number": "#85",
    "title": "LA COLUMNA DE EXCEL",
    "difficulty": "Medio",
    "description": "/*\n * Crea una función que calcule el número de la columna de una hoja de Excel\n * teniendo en cuenta su nombre.\n * - Las columnas se designan por letras de la \"A\" a la \"Z\" de forma infinita.\n * - Ejemplos: A = 1, Z = 26, AA = 27, CA = 79.\n */"
  },
  {
    "number": "#86",
    "title": "TETRIS",
    "difficulty": "Medio",
    "description": "/*\n * Crea un programa capaz de gestionar una pieza de Tetris.\n * - La pantalla de juego tiene 10 filas y 10 columnas representadas por símbolos 🔲\n * - La pieza de tetris a manejar será la siguiente (si quieres, puedes elegir otra):\n *   🔳\n *   🔳🔳🔳\n * - La pieza aparecerá por primera vez en la parte superior izquierda de la pantalla de juego.\n *   🔳🔲🔲🔲🔲🔲🔲🔲🔲🔲\n *   🔳🔳🔳🔲🔲🔲🔲🔲🔲🔲\n *   🔲🔲🔲🔲🔲🔲🔲🔲🔲🔲\n *   🔲🔲🔲🔲🔲🔲🔲🔲🔲🔲\n *   🔲🔲🔲🔲🔲🔲🔲🔲🔲🔲\n *   🔲🔲🔲🔲🔲🔲🔲🔲🔲🔲\n *   🔲🔲🔲🔲🔲🔲🔲🔲🔲🔲\n *   🔲🔲🔲🔲🔲🔲🔲🔲🔲🔲\n *   🔲🔲🔲🔲🔲🔲🔲🔲🔲🔲\n *   🔲🔲🔲🔲🔲🔲🔲🔲🔲🔲\n * - Debes desarrollar una función capaz de desplazar y rotar la pieza en el tablero,\n *   recibiendo una acción cada vez que se llame, mostrando cómo se visualiza en\n *   la pantalla de juego.\n * - Las acciones que se pueden aplicar a la pieza son: derecha, izquierda, abajo, rotar.\n * - Debes tener en cuenta los límites de la pantalla de juego.\n */"
  },
  {
    "number": "#87",
    "title": "TXT",
    "difficulty": "Medio",
    "description": "/*\n * Crea un programa capaz de interactuar con un fichero TXT.\n * IMPORTANTE: El fichero TXT NO debe subirse como parte de la corrección.\n * Únicamente el código.\n *\n * - Si no existe, debe crear un fichero llamado \"text.txt\".\n * - Desde el programa debes ser capaz de introducir texto por consola y guardarlo\n *   en una nueva línea cada vez que se pulse el botón \"Enter\".\n * - Si el fichero existe, el programa tiene que dar la opción de seguir escribiendo\n *   a continuación o borrar su contenido y comenzar desde el principio.\n * - Si se selecciona continuar escribiendo, se tiene que mostrar por consola\n *   el texto que ya posee el fichero. \n */"
  },
  {
    "number": "#88",
    "title": "PRIMEROS PASOS",
    "difficulty": "Fácil",
    "description": "/*\n * Como cada año, el día 256 se celebra el \"Día de la Programación\".\n * En nuestra comunidad siempre hacemos una gran fiesta donde repartirmos\n * 256 regalos para seguir aprendiendo programación:\n * https://diadelaprogramacion.com\n *\n * Para seguir ayudando, te propongo este reto:\n * Mostrar la sintaxis de los principales elementos de un lenguaje\n * en TODOS los lenguajes de programación que podamos. ¿Llegaremos a 50?\n *\n * En un fichero, haz lo siguiente (si el lenguaje lo soporta),\n * y comenta cada bloque para identificar con qué se corresponde:\n * - Haz un \"Hola, mundo!\"\n * - Crea variables de tipo String, numéricas (enteras y decimales)\n *   y Booleanas (o cualquier tipo de dato primitivo).\n * - Crea una constante.\n * - Usa un if, else if y else.\n * - Crea estructuras como un array, lista, tupla, set y diccionario.\n * - Usa un for, foreach y un while.\n * - Crea diferentes funciones (con/sin parámetros y con/sin retorno).\n * - Crea una clase.\n * - Muestra el control de excepciones.\n *\n * Así, cualquier persona podrá consultar rápidamente diferentes ejemplos\n * de sintaxis básica de muchos lenguajes.\n *\n * ¡Muchas gracias!\n */"
  },
  {
    "number": "#89",
    "title": "PERMUTACIONES",
    "difficulty": "Medio",
    "description": "/*\n * Crea un programa que sea capaz de generar e imprimir todas las\n * permutaciones disponibles formadas por las letras de una palabra.\n * - Las palabras generadas no tienen por qué existir.\n * - Deben usarse todas las letras en cada permutación.\n * - Ejemplo: sol, slo, ols, osl, los, lso\n */"
  },
  {
    "number": "#90",
    "title": "COLORES HEX Y RGB",
    "difficulty": "Medio",
    "description": "/*\n * Crea las funciones capaces de transformar colores HEX\n * a RGB y viceversa.\n * Ejemplos:\n * RGB a HEX: r: 0, g: 0, b: 0 -> #000000\n * HEX a RGB: hex: #000000 -> (r: 0, g: 0, b: 0)\n */"
  },
  {
    "number": "#91",
    "title": "LAS SUMAS",
    "difficulty": "Medio",
    "description": "/*\n * Crea una función que encuentre todas las combinaciones de los números\n * de una lista que suman el valor objetivo.\n * - La función recibirá una lista de números enteros positivos\n *   y un valor objetivo.\n * - Para obtener las combinaciones sólo se puede usar\n *   una vez cada elemento de la lista (pero pueden existir\n *   elementos repetidos en ella).\n * - Ejemplo: Lista = [1, 5, 3, 2],  Objetivo = 6\n *   Soluciones: [1, 5] y [1, 3, 2] (ambas combinaciones suman 6)\n *   (Si no existen combinaciones, retornar una lista vacía)\n */"
  },
  {
    "number": "#92",
    "title": "TRIPLES PITAGÓRICOS",
    "difficulty": "Medio",
    "description": "/*\n * Crea una función que encuentre todos los triples pitagóricos\n * (ternas) menores o iguales a un número dado.\n * - Debes buscar información sobre qué es un triple pitagórico.\n * - La función únicamente recibe el número máximo que puede\n *   aparecer en el triple.\n * - Ejemplo: Los triples menores o iguales a 10 están\n *   formados por (3, 4, 5) y (6, 8, 10).\n */"
  },
  {
    "number": "#93",
    "title": "TABLA DE MULTIPLICAR",
    "difficulty": "Fácil",
    "description": "/*\n * Crea un programa que sea capaz de solicitarte un número y se\n * encargue de imprimir su tabla de multiplicar entre el 1 y el 10.\n * - Debe visualizarse qué operación se realiza y su resultado.\n *   Ej: 1 x 1 = 1\n *       1 x 2 = 2\n *       1 x 3 = 3\n *       ...\n */"
  },
  {
    "number": "#94",
    "title": "LA CASA ENCANTADA",
    "difficulty": "Difícil",
    "description": "/*\n * Este es un reto especial por Halloween.\n * Te encuentras explorando una mansión abandonada llena de habitaciones.\n * En cada habitación tendrás que resolver un acertijo para poder avanzar a la siguiente.\n * Tu misión es encontrar la habitación de los dulces.\n *\n * Se trata de implementar un juego interactivo de preguntas y respuestas por terminal.\n * (Tienes total libertad para ser creativo con los textos)\n *\n * - 🏰 Casa: La mansión se corresponde con una estructura cuadrada 4 x 4\n *   que deberás modelar. Las habitaciones de puerta y dulces no tienen enigma.\n *   (16 habitaciones, siendo una de entrada y otra donde están los dulces)\n *   Esta podría ser una representación:\n *   🚪⬜️⬜️⬜️\n *   ⬜️👻⬜️⬜️\n *   ⬜️⬜️⬜️👻\n *   ⬜️⬜️🍭⬜️\n * - ❓ Enigmas: Cada habitación propone un enigma aleatorio que deberás responder con texto.\n *   Si no lo aciertas no podrás desplazarte.\n * - 🧭 Movimiento: Si resuelves el enigma se te preguntará a donde quieres desplazarte.\n *   (Ejemplo: norte/sur/este/oeste. Sólo deben proporcionarse las opciones posibles)\n * - 🍭 Salida: Sales de la casa si encuentras la habitación de los dulces.\n * - 👻 (Bonus) Fantasmas: Existe un 10% de que en una habitación aparezca un fantasma y\n *   tengas que responder dos preguntas para salir de ella.\n */"
  },
  {
    "number": "#95",
    "title": "PUNTO DE ENCUENTRO",
    "difficulty": "Difícil",
    "description": "/*\n * Crea una función que calcule el punto de encuentro de dos objetos en movimiento\n * en dos dimensiones.\n * - Cada objeto está compuesto por una coordenada xy y una velocidad de desplazamiento\n *   (vector de desplazamiento) por unidad de tiempo (también en formato xy).\n * - La función recibirá las coordenadas de inicio de ambos objetos y sus velocidades.\n * - La función calculará y mostrará el punto en el que se encuentran y el tiempo que\n *   tardarn en lograrlo.\n * - La función debe tener en cuenta que los objetos pueden no llegar a encontrarse.\n */"
  },
  {
    "number": "#96",
    "title": "SIMULADOR DE CLIMA",
    "difficulty": "Fácil",
    "description": "/*\n * Crea una función que simule las condiciones climáticas (temperatura y probabilidad de lluvia)\n * de un lugar ficticio al pasar un número concreto de días según estas reglas:\n * - La temperatura inicial y el % de probabilidad de lluvia lo define el usuario.\n * - Cada día que pasa:\n *   - 10% de posibilidades de que la temperatura aumente o disminuya 2 grados.\n *   - Si la temperatura supera los 25 grados, la probabilidad de lluvia al día\n *     siguiente aumenta en un 20%.\n *   - Si la temperatura baja de 5 grados, la probabilidad de lluvia al día\n *     siguiente disminuya en un 20%.\n *   - Si llueve (100%), la temperatura del día siguiente disminuye en 1 grado.\n * - La función recibe el número de días de la predicción y muestra la temperatura\n *   y si llueve durante todos esos días.\n * - También mostrará la temperatura máxima y mínima de ese periodo y cuántos días va a llover.\n */"
  },
  {
    "number": "#97",
    "title": "ADIVINANZAS MATEMÁTICAS",
    "difficulty": "Medio",
    "description": "/*\n * Crea un juego interactivo por terminal en el que tendrás que adivinar\n * el resultado de diferentes operaciones matemáticas aleatorias\n * (suma, resta, multiplicación o división de dos números enteros).\n * - Tendrás 3 segundos para responder correctamente.\n * - El juego finaliza si no se logra responder en ese tiempo.\n * - Al finalizar el juego debes mostrar cuántos cálculos has acertado.\n * - Cada 5 aciertos debes aumentar en uno el posible número de cifras\n *   de la operación (cada vez en un operando):\n *   - Preguntas 1 a 5: X (entre 0 y 9) operación Y (entre 0 y 9)\n *   - Preguntas 6 a 10: XX (entre 0 y 99) operación Y (entre 0 y 9)\n *   - Preguntas 11 a 15: XX operación YY\n *   - Preguntas 16 a 20: XXX (entre 0 y 999) operación YY\n *   ..\n */"
  },
  {
    "number": "#98",
    "title": "EL CALENDARIO DE ADEVIENTO 2023",
    "difficulty": "Fácil",
    "description": "/*\n * ¿Conoces el calendario de aDEViento de la comunidad (https://adviento.dev)?\n * 24 días, 24 regalos sorpresa relacionados con desarrollo de software.\n * Desde el 1 al 24 de diciembre.\n *\n * Crea un programa que simule el mecanismo de participación:\n * - Mediante la terminal, el programa te preguntará si quieres añadir y borrar\n *   participantes, mostrarlos, lanzar el sorteo o salir.\n * - Si seleccionas añadir un participante, podrás escribir su nombre y pulsar enter.\n * - Si seleccionas añadir un participante, y este ya existe, avisarás de ello.\n *   (Y no lo duplicarás)\n * - Si seleccionas mostrar los participantes, se listarán todos.\n * - Si seleccionas eliminar un participante, podrás escribir su nombre y pulsar enter.\n *   (Avisando de si lo has eliminado o el nombre no existe)\n * - Si seleccionas realizar el sorteo, elegirás una persona al azar\n *   y se eliminará del listado.\n * - Si seleccionas salir, el programa finalizará.\n */"
  },
  {
    "number": "#99",
    "title": "LA CARRERA DE COCHES",
    "difficulty": "Medio",
    "description": "/*\n * Crea un programa que simule la competición de dos coches en una pista.\n * - Los dos coches estarán representados por 🚙 y 🚗. Y la meta por 🏁.\n * - Cada pista tendrá entre 1 y 3 árboles 🌲 colocados de forma aleatoria.\n * - Las dos pistas tendrán una longitud configurable de guiones bajos \"_\".\n * - Los coches comenzarán en la parte derecha de las pistas. Ejemplo:\n *   🏁____🌲_____🚙\n *   🏁_🌲____🌲___🚗\n *\n * El juego se desarrolla por turnos de forma automática, y cada segundo\n * se realiza una acción sobre los coches (moviéndose a la vez), hasta que\n * uno de ellos (o los dos a la vez) llega a la meta.\n * - Acciones:\n *   - Avanzar entre 1 a 3 posiciones hacia la meta.\n *   - Si al avanzar, el coche finaliza en la posición de un árbol,\n *     se muestra 💥 y no avanza durante un turno.\n *   - Cada turno se imprimen las pistas y sus elementos.\n *   - Cuando la carrera finalice, se muestra el coche ganador o el empate.\n */"
  },
  {
    "number": "#100",
    "title": "LA PALABRA DE 100 PUNTOS",
    "difficulty": "Fácil",
    "description": "/*\n * La última semana de 2021 comenzamos la actividad de retos de programación,\n * con la intención de resolver un ejercicio cada semana para mejorar\n * nuestra lógica... ¡Hemos llegado al EJERCICIO 100! Gracias 🙌\n *\n * Crea un programa que calcule los puntos de una palabra.\n * - Cada letra tiene un valor asignado. Por ejemplo, en el abecedario\n *   español de 27 letras, la A vale 1 y la Z 27.\n * - El programa muestra el valor de los puntos de cada palabra introducida.\n * - El programa finaliza si logras introducir una palabra de 100 puntos.\n * - Puedes usar la terminal para interactuar con el usuario y solicitarle\n *   cada palabra.\n */"
  },
  {
    "number": "#101",
    "title": "EL RANKING",
    "difficulty": "Difícil",
    "description": "/*\n * Todo llega a su fin... Este es el último reto de programación\n * semanal de 2023.\n *\n * Crea un programa que muestre un listado calculado en tiempo real\n * con todos los usuarios que han resuelto algún reto de programación\n * de este año.\n * - El listado debe estar ordenado por el número de ejercicios resueltos\n *   por cada usuario (y mostrar ese contador al lado de su nombre).\n * - También se debe de mostrar el número de usuarios que han participado\n *   y el número de correcciones enviadas.\n *\n * Muchísimas gracias por ayudar a crear este gran recurso\n * para la comunidad... ¡Prepárate para 2024!\n */"
  }
]